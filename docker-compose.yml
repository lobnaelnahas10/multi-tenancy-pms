version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: pms_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-pms_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-pms_password}
      POSTGRES_DB: ${POSTGRES_DB:-pms_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pms_user} -d ${POSTGRES_DB:-pms_db}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: pms_backend
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-pms_user}:${POSTGRES_PASSWORD:-pms_password}@db:5432/${POSTGRES_DB:-pms_db}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - DEBUG=${DEBUG:-False}
    volumes:
      - ./backend:/app/backend
    ports:
      - "8000:8000"
    command: >
      sh -c "
      alembic upgrade head &&
      uvicorn main:app --host 0.0.0.0 --port 8000 --reload
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: pms_frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - pms-network

volumes:
  postgres_data:
